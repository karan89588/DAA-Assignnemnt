#include<iostream>
#include<vector>
#include<algorithm>
#include<functional>
using namespace std;
void merge_sort(int a[],int lb,int ub);
void merging(int arr[], int l, int m, int r);
vector< vector<int> > find(int a[],int n,int k);
int main()
{
    int t,n,*a=NULL,k;
    vector< vector<int> > v;
    cin>>t;
    while(t--)
    {
        cin>>n;
        a=(int*)malloc(sizeof(int)*n);
        for(int i=0;i<n;i++)
            cin>>a[i];
        cin>>k;
        v=find(a,n,k);
        for(int i=0;i<v.size();i++)
        {
            for(int j=0;j<v[i].size();j++)
                cout<<v[i][j]<<' ';
            cout<<endl;
        }
    }
    return 0;
}
vector< vector<int> > find(int a[],int n,int k)
{
    vector< vector<int> > v;
    merge_sort(a,0,n-1);
    int i=0,j=n-1;
    while(i<j)
    {
        if(a[i]+a[j]<k)
            i++;
        else if(a[i]+a[j]>k)
            j--;
        else
        {
            vector<int> s;
            s.push_back(a[i]);
            s.push_back(a[j]);
            v.push_back(s);
            i++;
            j--;
        }
    }
    return v;
}
void merge_sort(int a[],int lb,int ub)
{
    int mid;

    if(lb<ub)
    {
        mid=(lb+ub)/2;
        merge_sort(a,lb,mid);
        merge_sort(a,mid+1,ub);
        merging(a,lb,mid,ub);
    }
}
void merging(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[n1], R[n2];
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}




