#include<iostream>
#include<vector>
using namespace std;
void bellmanford(int s,vector<vector<int> > g,int t);
void finds(int i,vector<int> parent);
int main(){
    int t,s;
    cin>>t;
    vector<vector<int> > g(t,vector<int>(t,0));
    for(int i=0;i<t;i++){
        for(int j=0;j<t;j++){
            cin>>s;
            g[i][j]=s;
        }
    }
    cin>>s;
    bellmanford(s-1,g,t);
    return 0;
}
void bellmanford(int s,vector<vector<int> > g,int t){
    vector<int> parent(t,-1);
    vector<int> value(t,INT_MAX);
    value[s]=0;
    bool update=false;
    for(int u=0;u<t-1;u++){
        update=false;
        for(int i=0;i<t;i++){
            for(int j=0;j<t;j++){
                if(g[i][j]!=0&&value[i]!=INT_MAX&&value[j]>value[i]+g[i][j]){
                    value[j]=value[i]+g[i][j];
                    parent[j]=i;
                    update=true;
                }
            }
        }
        if(update==false)
            break;
    }
    for(int i=0;i<t&&update==true;i++){
        for(int j=0;j<t;j++){
            if(g[i][j]!=0&&value[i]!=INT_MAX&&value[j]>value[i]+g[i][j]){
                cout<<"Graph contain negative cycle.";
                return ;
            }
        }
    }
    cout<<endl;
    for(int i=0;i<t;i++){
        finds(i,parent);
        cout<<" : "<<value[i]<<endl;
    }
}
void finds(int i,vector<int> parent){
    if(parent[i]<0){
        cout<<i+1;
        return ;
    }
    cout<<i+1<<" ";
    finds(parent[i],parent);
}
